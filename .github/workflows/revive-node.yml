name: Revive Dev Node (Optimized)

on:
  workflow_dispatch:
    inputs:
      polkadot-sdk-ref:
        description: 'Polkadot SDK git ref'
        required: false
        default: '8e2b6f742a38bb13688e12abacded0aab2dbbb23'
        type: string
      use-prebuilt:
        description: 'Use prebuilt binaries if available'
        required: false
        default: true
        type: boolean
      rust-version:
        description: 'Rust toolchain version'
        required: false
        default: '1.86'
        type: string
      run-duration:
        description: 'Seconds to keep the node running'
        required: false
        default: '60'
        type: string

jobs:
  run-local-node:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Try download prebuilt binaries
        id: prebuilt
        if: inputs.use-prebuilt
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: revive-binaries-${{ inputs.polkadot-sdk-ref }}
          path: ./prebuilt-binaries

      - name: Setup Rust (only if building)
        if: steps.prebuilt.outcome == 'failure' || !inputs.use-prebuilt
        uses: ./.github/actions/setup-rust
        with:
          rust-version: ${{ inputs.rust-version }}

      - name: Fetch SDK (only if building)
        id: fetch
        if: steps.prebuilt.outcome == 'failure' || !inputs.use-prebuilt
        uses: ./.github/actions/fetch-polkadot-sdk
        with:
          ref: ${{ inputs.polkadot-sdk-ref }}
          cache-key-suffix: ${{ inputs.rust-version }}

      - name: Build binaries (fallback)
        if: steps.prebuilt.outcome == 'failure' || !inputs.use-prebuilt
        run: |
          START_TIME=$(date +%s)
          cd ${{ steps.fetch.outputs.path }}
          cargo build --locked --release --jobs $(nproc) \
            -p revive-dev-node --bin revive-dev-node \
            -p pallet-revive-eth-rpc --bin eth-rpc
          mkdir -p ../prebuilt-binaries
          cp target/release/{revive-dev-node,eth-rpc} ../prebuilt-binaries/
          END_TIME=$(date +%s)
          echo "Build took $((END_TIME - START_TIME)) seconds"

      - name: Setup binaries
        run: |
          mkdir -p ./runtime-binaries
          chmod +x ./prebuilt-binaries/*
          cp ./prebuilt-binaries/* ./runtime-binaries/

      - name: Start Revive node
        run: |
          nohup ./runtime-binaries/revive-dev-node --dev > revive-node.log 2>&1 &
          echo $! > revive-node.pid

      - name: Start ETH-RPC proxy
        run: |
          nohup ./runtime-binaries/eth-rpc --dev > eth-rpc.log 2>&1 &
          echo $! > eth-rpc.pid

      - name: Verify ETH-RPC readiness (http://127.0.0.1:8545)
        shell: bash
        run: |
          for i in {1..20}; do
            if curl -sS -H 'Content-Type: application/json' \
              --data '{"jsonrpc":"2.0","id":1,"method":"eth_chainId","params":[]}' \
              http://127.0.0.1:8545 | grep -q 'result'; then
              echo "✅ ETH-RPC is responding"; exit 0; fi
            echo "⏳ Waiting for ETH-RPC... ($i)"; sleep 2;
          done
          echo "❌ ETH-RPC did not become ready"; exit 1

      - name: Health window
        shell: bash
        run: |
          DURATION=${{ inputs.run-duration }}
          if [ "$DURATION" = "0" ]; then echo "Skipping health window"; exit 0; fi
          echo "Monitoring for $DURATION seconds..."
          end=$(( $(date +%s) + DURATION ))
          while [ $(date +%s) -lt $end ]; do
            if [ -f revive-node.pid ] && kill -0 $(cat revive-node.pid) 2>/dev/null; then :; else
              echo "❌ revive-dev-node process exited"; exit 1; fi
            if [ -f eth-rpc.pid ] && kill -0 $(cat eth-rpc.pid) 2>/dev/null; then :; else
              echo "❌ eth-rpc process exited"; exit 1; fi
            sleep 5
          done
          echo "✅ Health window completed"

      - name: Teardown
        if: always()
        uses: ./.github/actions/teardown-revive-node


