name: Setup Revive Node
description: Clone Polkadot SDK (pinned), build revive-dev-node, start it

inputs:
  polkadot-sdk-ref:
    description: Git ref (commit/branch/tag) for polkadot-sdk
    required: false
    default: 8e2b6f742a38bb13688e12abacded0aab2dbbb23
  cache-key-suffix:
    description: Suffix to vary the cache key
    required: false
    default: ''
  sdk-path:
    description: Path to polkadot-sdk checkout
    required: false
    default: polkadot-sdk
  use-prebuilt:
    description: Use prebuilt binaries from binaries-root instead of building
    required: false
    default: 'false'
  binaries-root:
    description: Root folder containing prebuilt binaries (e.g., common-binaries)
    required: false
    default: common-binaries
  arch:
    description: Architecture folder name under binaries-root (e.g., linux-amd64)
    required: false
    default: linux-amd64
  fail-if-missing:
    description: If use-prebuilt is true and binaries are missing, fail instead of building
    required: false
    default: 'false'

outputs:
  revive-pid:
    value: ${{ steps.start.outputs.revive_pid }}

runs:
  using: composite
  steps:
    - name: Check for cached binary
      shell: bash
      run: |
        set -euo pipefail
        BINARY_CACHE_KEY="revive-node-${{ inputs.polkadot-sdk-ref }}-${{ runner.arch }}"
        CACHE_DIR="$HOME/.cache/revive-binaries/$BINARY_CACHE_KEY"
        if [ -f "$CACHE_DIR/revive-dev-node" ]; then
          echo "Using cached binary from $CACHE_DIR"
          mkdir -p "${{ inputs.sdk-path }}/target/release"
          cp "$CACHE_DIR/revive-dev-node" "${{ inputs.sdk-path }}/target/release/"
          chmod +x "${{ inputs.sdk-path }}/target/release/revive-dev-node"
          echo "BINARY_CACHED=true" >> $GITHUB_ENV
        fi

    - name: Prepare revive-dev-node (prebuilt or build)
      shell: bash
      run: |
        set -euo pipefail
        SDK_PATH="${{ inputs.sdk-path }}"
        BIN_ROOT="${{ inputs.binaries-root }}"
        REF="${{ inputs.polkadot-sdk-ref }}"
        ARCH="${{ inputs.arch }}"
        PREBUILT_SRC="$BIN_ROOT/$REF/$ARCH/revive-dev-node"
        DEST_DIR="$SDK_PATH/target/release"
        mkdir -p "$DEST_DIR"
        if [ -f "$DEST_DIR/revive-dev-node" ]; then
          echo "revive-dev-node already present, skipping build/copy"
          exit 0
        fi
        if [ "${{ inputs.use-prebuilt }}" = "true" ]; then
          if [ -f "$PREBUILT_SRC" ]; then
            echo "Using prebuilt revive-dev-node from $PREBUILT_SRC"
            install -m 0755 "$PREBUILT_SRC" "$DEST_DIR/revive-dev-node"
          else
            echo "Prebuilt revive-dev-node not found at $PREBUILT_SRC"
            if [ "${{ inputs.fail-if-missing }}" = "true" ]; then
              exit 1
            fi
            echo "Falling back to build from source"
            cd "$SDK_PATH"
            git checkout "$REF"
            cargo build --locked -p revive-dev-node --bin revive-dev-node --release
          fi
        else
          cd "$SDK_PATH"
          git checkout "$REF"
          cargo build --locked -p revive-dev-node --bin revive-dev-node --release
        fi

    - name: Start processes
      id: start
      shell: bash
      run: |
        nohup "${{ inputs.sdk-path }}"/target/release/revive-dev-node --dev > revive-node.log 2>&1 &
        echo $! > revive-node.pid
        echo "revive_pid=$(cat revive-node.pid)" >> $GITHUB_OUTPUT


