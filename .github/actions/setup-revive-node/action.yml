name: "Setup Revive Node"
description: "Clones, builds, and caches the Revive node from polkadot-smart-contracts-docs-tests repository"

inputs:
  rust-version:
    description: "Rust version to use for building"
    required: true
  polkadot-sdk-ref:
    description: "Git ref (commit/branch/tag) for polkadot-sdk"
    required: true
    default: "8e2b6f742a38bb13688e12abacded0aab2dbbb23"
  cache-key-suffix:
    description: "Suffix for build cache key"
    required: false
    default: ""


outputs:
  revive-node-path:
    description: "Path to cloned revive-node"
    value: ${{ steps.setup.outputs.revive-node-path }}
  cache-hit:
    description: "Whether build cache was hit"
    value: ${{ steps.build-cache.outputs.cache-hit }}

runs:
  using: "composite"
  steps:
    - name: Setup Rust
      uses: ./.github/actions/setup-rust
      with:
        rust-version: ${{ inputs.rust-version }}

    - name: Setup template and paths
      id: setup
      shell: bash
      run: |
        REVIVE_NODE_PATH="${GITHUB_WORKSPACE}/revive-node"
        
        echo "revive-node-path=$REVIVE_NODE_PATH" >> $GITHUB_OUTPUT

    - name: Clone revive-node
      shell: bash
      run: |
        echo "üì• Cloning revive-node from https://github.com/paritytech/polkadot-sdk (branch: ${{ inputs.polkadot-sdk-ref }})..."
        
        if [ -d "revive-node" ]; then
          echo "üßπ Cleaning existing revive-node directory..."
          rm -rf revive-node
        fi
        
        # Clone with sparse checkout to get only the revive-node directory
        git clone --depth 1 https://github.com/paritytech/polkadot-sdk
        cd polkadot-sdk
        git fetch --depth 1 origin ${{ inputs.polkadot-sdk-ref }}
        git checkout ${{ inputs.polkadot-sdk-ref }}

        echo "‚úÖ revive-node cloned successfully"


    - name: Cache build artifacts
      id: build-cache
      uses: actions/cache@v4
      with:
        path: |
          polkadot-sdk/target
        key: target-${{ runner.os }}-${{ runner.arch }}-${{ inputs.rust-version }}-${{ inputs.polkadot-sdk-ref }}-${{ hashFiles('polkadot-sdk/**/Cargo.lock') }}${{ inputs.cache-key-suffix }}
        restore-keys: |
          target-${{ runner.os }}-${{ runner.arch }}-${{ inputs.rust-version }}-${{ inputs.polkadot-sdk-ref }}-
          target-${{ runner.os }}-${{ runner.arch }}-${{ inputs.rust-version }}-
          target-${{ runner.os }}-${{ runner.arch }}-

    - name: Build revive-dev-node
      if: steps.build-cache.outputs.cache-hit != 'true'
      working-directory: polkadot-sdk/
      shell: bash
      run: |
        echo "üî® Building revive-dev-node..."
        echo "üìä Available disk space:"
        df -h
        
        # Set build optimizations
        export CARGO_PROFILE_RELEASE_LTO=thin
        export CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1
        
        # Build with progress and error handling
        cargo build -p revive-dev-node --bin revive-dev-node --release
        cargo build -p pallet-revive-eth-rpc --bin eth-rpc --release

        echo "‚úÖ Build completed successfully"
        
        echo "üìä Final disk space:"
        df -h

    - name: Copy (overwrite) binaries
      shell: bash
      run: |
        cp polkadot-sdk/target/release/revive-dev-node ${{ github.workspace }}/hardhat-examples/binaries/revive-dev-node
        cp polkadot-sdk/target/release/eth-rpc ${{ github.workspace }}/hardhat-examples/binaries/eth-rpc

    - name: Verify build artifacts
      shell: bash
      run: |
        echo "üîç Verifying build artifacts..."
        
        RUNTIME_PATH="${{ steps.setup.outputs.revive-node-path }}"
        
        # # Check runtime
        # if [ ! -f "$REVIVE_NODE_PATH" ]; then
        #   echo "‚ùå Runtime WASM not found at: $REVIVE_NODE_PATH"
        #   echo "üîç Available runtime files:"
        #   find polkadot-sdk/runtime/revive/target -name "*.wasm" -type f || echo "No WASM files found"
        #   exit 1
        # fi
        
        # # Check file sizes
        # REVIVE_NODE_SIZE=$(du -h "$RUNTIME_PATH" | cut -f1)
        
        echo "‚úÖ revive-node verified: $RUNTIME_SIZE"